# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false
      
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [RelWithDebInfo]
        c_compiler: [clang, x86_64-w64-mingw32-gcc ]
        cpp_compiler: [clang++, x86_64-w64-mingw32-g++]
        include:
          - os: windows-latest
            c_compiler: x86_64-w64-mingw32-gcc
            cpp_compiler: x86_64-w64-mingw32-g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: ubuntu-latest
            c_compiler: x86_64-w64-mingw32-gcc
            cpp_compiler: x86_64-w64-mingw32-g++

    steps:
    - uses: actions/checkout@v3

    - name: Set up MinGW
      if: runner.os == 'Windows'
      uses: egor-tensin/setup-mingw@v2
      with:
        platform: x64

    - name: submodules
      run: |
        git submodule update --init --depth 1 deps/cglm deps/stb

    - name: dependencies
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          sudo apt update && sudo apt -y install libgl-dev libx11-dev pkgconf libegl-dev
        fi
      shell: bash
        
    - name: dengine rc
      run: |
        cmake -S main/dengine-rc -B build/dengine-rc
        cmake --build build/dengine-rc
        
    - name: dengine
      run: |
        cmake -S . -B build/${{ matrix.os }}
        cmake --build build/${{ matrix.os }}

    - name: install and compress output
      run: |
        cmake --install build/${{ matrix.os }} --prefix out-${{ matrix.os }}
        if [ "$RUNNER_OS" == "Linux" ]; then
          echo "use LD_LIBRARY_PATH=../../ to run executable so it pull libraries from lib" > out-${{ matrix.os }}/README_linux
          tar c out-${{ matrix.os }}/** -O | zstd -9 > linux_build.tar.zst
        fi
      shell: bash

    - name: linux build
      if: runner.os == 'Linux'
      uses: actions/upload-artifact@v4
      with:
        name: linux_build
        path: ./linux_build.tar.zst
