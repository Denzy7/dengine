#version 100

#cmakedefine DENGINE_LIGHTING_SHADOW3D
#cmakedefine DENGINE_LIGHTING_MAX_POINT @DENGINE_LIGHTING_MAX_POINT@
#cmakedefine DENGINE_LIGHTING_MAX_SPOT @DENGINE_LIGHTING_MAX_SPOT@
#ifdef DENGINE_LIGHTING_SHADOW3D
#define ENABLE_SHADOW3D
#endif
#define MAX_POINT_LIGHT DENGINE_LIGHTING_MAX_POINT
#define MAX_SPOT_LIGHT DENGINE_LIGHTING_MAX_POINT
precision mediump float;
struct LightOp
{
    int enable;

    vec3 ambient;
    vec3 diffuse;
    vec3 specular;

    float strength;
};

struct ShadowOp
{
    int enable;

    int shadow_map_size;

    int pcf, pcf_samples;

    float max_bias, min_bias;

    float far_shadow, near_shadow;
};

struct DirLight
{
    vec3 direction;
    LightOp light;
    ShadowOp shadow;
};

struct PointLight
{
    vec3 position;

    LightOp light;
    ShadowOp shadow;

    float constant, linear, quadratic;
};

struct SpotLight
{
    vec3 direction;
    PointLight pointLight;
    float innerCutOff, outerCutOff;
};

struct Material
{
    LightOp color;
    float alpha;
    float specular_power;
    /* float receive_shadow; */
};

varying vec3 Normal, CamPos, FragPos;
varying vec4 FragPosDirLightSpace;
varying vec2 TexCoord;
varying mat3 TBN;

uniform DirLight dLight;
uniform PointLight pLights[MAX_POINT_LIGHT];
uniform SpotLight sLights[MAX_SPOT_LIGHT];
uniform Material material;

uniform sampler2D dLightShadow;
uniform samplerCube pLightsShadow0;
uniform samplerCube pLightsShadow1;
/*add each manually after each iteration */
float pLightsShadowVal[MAX_POINT_LIGHT];

uniform samplerCube sLightsShadow0;
uniform samplerCube sLightsShadow1;
float sLightsShadowVal[MAX_SPOT_LIGHT];

uniform sampler2D diffuseTex;
uniform sampler2D specularTex;
uniform sampler2D normalTex;

uniform int nr_pointLights;
uniform int nr_spotLights;

vec3 texDiffuseCol = vec3(0.0);
vec3 texSpecularCol = vec3(0.0);
vec3 texNormalCol = vec3(0.0);

vec3 nNormal = vec3(0.0);
vec3 camDir = vec3(0.0);

/* TODO: can only one dirLight currently */
LightOp dirLightAdd();
LightOp pointLightAdd(PointLight pL);
LightOp spotLightAdd(SpotLight sL);

float shadowCalc2D(sampler2D twod, vec4 fpos, int pcf, int pcf_samples, int shadow_map_size, float shadow_bias);
float shadowCalcCube(samplerCube cube, vec3 pos, float shadowfar, float shadow_bias);

void main()
{
    texDiffuseCol = texture2D(diffuseTex, TexCoord).rgb;
    texSpecularCol = texture2D(specularTex, TexCoord).rgb;
    texNormalCol = texture2D(normalTex, TexCoord).rgb;

    nNormal = normalize(texNormalCol * 2.0 - 1.0);
    nNormal = normalize(TBN * nNormal);

    camDir = normalize(CamPos - FragPos);

    vec3 FragColor = vec3(0.0);
    LightOp op;
    float shadow = 0.0;
    float shadow_bias = 0.0;

    op = dirLightAdd();

    shadow_bias = max(dLight.shadow.max_bias * (1.0 - dot(nNormal, normalize(dLight.direction))), 0.005);
    shadow = shadowCalc2D(dLightShadow,
            FragPosDirLightSpace,
            dLight.shadow.pcf,
            dLight.shadow.pcf_samples,
            dLight.shadow.shadow_map_size,
            shadow_bias);

    FragColor += 
            (material.color.ambient * op.ambient) +
            (
             (1.0 - shadow) * 
             (
                (material.color.diffuse * op.diffuse) +
                (material.color.specular * op.specular)
             )
            );
#ifdef ENABLE_SHADOW3D
#if MAX_POINT_LIGHT > 0
    shadow_bias = max(0.1 * (1.0 - dot(nNormal, normalize(pLights[0].position - FragPos))), 0.005);
    pLightsShadowVal[0] = shadowCalcCube(pLightsShadow0,
                pLights[0].position,
                pLights[0].shadow.far_shadow,
                shadow_bias);
#endif
#if MAX_POINT_LIGHT > 1
    shadow_bias = max(0.1 * (1.0 - dot(nNormal, normalize(pLights[1].position - FragPos))), 0.005);
    pLightsShadowVal[1] = shadowCalcCube(pLightsShadow1,
                pLights[1].position,
                pLights[1].shadow.far_shadow,
                shadow_bias);
#endif
#endif
    for(int i = 0; i < nr_pointLights; i++)
    {
        PointLight pL = pLights[i];
        op = pointLightAdd(pL); 
        float distance = length(pL.position - FragPos);
        float atten = 1.0 / (pL.constant + pL.linear * distance + pL.quadratic * (distance * distance));

        FragColor += atten * ( 
                (material.color.ambient * op.ambient) +
                ( 
                 /* WE ACTUALLY NEED THIS ON ES 2.0 UNLESS YOU WANT HOLES IN YOUR 
                  * Mali-400 MP GPU*/
#ifdef ENABLE_SHADOW3D 
                 (1.0 - pLightsShadowVal[i]) * 
#endif
                 (
                  (material.color.diffuse * op.diffuse) +
                  (material.color.specular * op.specular)
                 )
                )
                );
    }

#ifdef ENABLE_SHADOW3D
#if MAX_SPOT_LIGHT > 0
    shadow_bias = max(0.1 * (1.0 - dot(nNormal, normalize(sLights[0].pointLight.position - FragPos))), 0.005);
    sLightsShadowVal[0] = shadowCalcCube(sLightsShadow0,
                sLights[0].pointLight.position,
                sLights[0].pointLight.shadow.far_shadow,
                shadow_bias);
#endif
#if MAX_SPOT_LIGHT > 1
    shadow_bias = max(0.1 * (1.0 - dot(nNormal, normalize(sLights[1].pointLight.position - FragPos))), 0.005);
    sLightsShadowVal[1] = shadowCalcCube(sLightsShadow1,
                sLights[1].pointLight.position,
                sLights[1].pointLight.shadow.far_shadow,
                shadow_bias);
#endif
#endif

    for(int i = 0; i < nr_spotLights; i++)
    {
        SpotLight sL = sLights[i];
        op = spotLightAdd(sL);  
        float distance = length(sL.pointLight.position - FragPos);
        float atten = 1.0 / (sL.pointLight.constant + sL.pointLight.linear * distance + sL.pointLight.quadratic * (distance * distance));

        FragColor += atten * ( 
                (material.color.ambient * op.ambient) +
                ( 
#ifdef ENABLE_SHADOW3D 
                 (1.0 - sLightsShadowVal[i]) * 
#endif
                 (
                  (material.color.diffuse * op.diffuse) +
                  (material.color.specular * op.specular)
                 )
                )
                );
    }

    gl_FragColor = vec4(FragColor, material.alpha);
}

LightOp dirLightAdd()
{
    LightOp op;

    vec3 dir = normalize(dLight.direction);
    float diff = max(dot(nNormal, dir), 0.0);

    vec3 reflectDir = reflect(-dir, nNormal);
    float spec = pow(max(dot(camDir, reflectDir), 0.0), material.specular_power);

    op.ambient = dLight.light.ambient * texDiffuseCol;
    op.diffuse = dLight.light.diffuse * diff * texDiffuseCol * dLight.light.strength;
    op.specular= dLight.light.specular * spec * texSpecularCol * dLight.light.strength;

    return op;

  /*  float shadow = 0.0;*/

    /*if(dLight.shadow.enable == 1)*/
    /*{*/
        /*shadow_bias = max(dLight.shadow.max_bias * (1.0 - dot(nNormal, dir)), 0.005);*/
        /*shadow = shadowCalc2D(dLightShadow,*/
                                 /*dLight.shadow_projview,*/
                                 /*dLight.shadow.pcf,*/
                                 /*dLight.shadow.pcf_samples,*/
                                 /*dLight.shadow.shadow_map_size);*/
    /*}*/

    /*return ambient + (1.0 - shadow) * (diffuse + specular);*/
}

LightOp pointLightAdd(PointLight pL)
{
    LightOp op;
    vec3 dir = normalize(pL.position - FragPos);
    float diff = max(dot(nNormal, dir), 0.0);

    vec3 reflectDir=reflect(-dir, nNormal);
    float spec = pow(max(dot(camDir, reflectDir), 0.0), material.specular_power);

    op.ambient = pL.light.ambient * texDiffuseCol;
    op.diffuse = pL.light.diffuse * diff * texDiffuseCol * pL.light.strength;
    op.specular = pL.light.specular * spec * texSpecularCol * pL.light.strength;

    return op;

/*    float shadow = 0.0;*/
    /*shadow_bias = max(0.1 * (1.0 - dot(nNormal, dir)), 0.005);*/
    /*shadow = shadowCalcCube(cube, pL.position, pL.shadow.far_shadow);*/



    /*return atten*(ambient + (1.0 - shadow) * (diffuse+specular));*/
}

LightOp spotLightAdd(SpotLight sL)
{
    LightOp op;
    op.diffuse = vec3(0.0);
    op.specular = vec3(0.0);
    op.ambient = vec3(0.0);

    vec3 dir = normalize(sL.pointLight.position - FragPos);
    float diff = max(dot(nNormal, dir), 0.0);

    vec3 reflectDir=reflect(-dir, nNormal);
    float spec = pow(max(dot(camDir, reflectDir), 0.0), material.specular_power);

    op.ambient = sL.pointLight.light.ambient * texDiffuseCol;
    op.diffuse = sL.pointLight.light.diffuse * diff * texDiffuseCol * sL.pointLight.light.strength;
    op.specular = sL.pointLight.light.specular * spec * texSpecularCol * sL.pointLight.light.strength;

    float theta = dot(dir, normalize(sL.direction));
    float epsilon = sL.innerCutOff - sL.outerCutOff; 
    float intensity = clamp( (theta - sL.outerCutOff) / epsilon, 0.0, 1.0);

    op.ambient*=intensity;
    op.diffuse*=intensity;
    op.specular*=intensity;

    return op;

/*    float shadow = 0.0;*/
    /*shadow_bias = max(0.1 * (1.0 - dot(nNormal, dir)), 0.005);*/
    /*shadow = shadowCalcCube(cube, sL.pointLight.position, sL.pointLight.shadow.far_shadow);*/

    /*float distance = length(sL.pointLight.position - FragPos);*/
    /*float atten = 1.0 / (sL.pointLight.constant + sL.pointLight.linear * distance + sL.pointLight.quadratic * (distance * distance));*/
    /*return atten*(ambient + (1.0 - shadow) * (diffuse+specular));*/
}

float shadowCalc2D(sampler2D twod, vec4 fpos, int pcf, int pcf_samples, int shadow_map_size, float shadow_bias)
{
    float shadow = 0.0;
    vec3 coord = fpos.xyz / fpos.w;
    coord = coord * 0.5 + 0.5;
    float current = coord.z;

    if(pcf == 1)
    {
        vec2 texelsz = 1.0 / vec2(shadow_map_size, shadow_map_size);
        for(int x = -1; x <= 1; ++x)
        {
            for(int y = -1; y <= 1; ++y)
            {
                float pcf_val = texture2D(twod, coord.xy + vec2(x, y) * texelsz).r;

                shadow += current - shadow_bias > pcf_val ? 1.0 : 0.0;
            }
        }
        shadow /= float(pcf_samples);
    }else
    {
        float close = texture2D(twod, coord.xy).r;
        shadow = current - shadow_bias > close ? 1.0 : 0.0;
    }

    if(coord.z > 1.0)
       shadow = 0.0;
    return shadow;
}

float shadowCalcCube(samplerCube cube, vec3 pos, float shadowfar, float shadow_bias)
{
    float shadow = 0.0;
    vec3 distance = vec3(0.0);
    distance = FragPos - pos;
    vec4 sampl = textureCube(cube, distance);

    if(length(sampl.rgb) == 0.0)
       return 0.0;

    float current = length(distance);
    float close = sampl.r;
    //return to depth
    close*=shadowfar;
    shadow = current - shadow_bias > close ? 1.0 : 0.0;
    return shadow;
}
