plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

def keystorePropertiesFile = rootProject.file("signing.properties")
def keystoreProperties = new Properties()
def isSigningConfigAvailable = false

if (keystorePropertiesFile.exists()) {
    try {
        keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
        isSigningConfigAvailable = keystoreProperties.containsKey('storeFile') &&
                                   keystoreProperties.containsKey('storePassword') &&
                                   keystoreProperties.containsKey('keyAlias') &&
                                   keystoreProperties.containsKey('keyPassword')
    } catch (Exception e) {
        println("Warning: Could not load signing.properties. Proceeding unsigned.")
    }
} else {
    println("Warning: signing.properties file not found. Proceeding unsigned.")
}

android {
    namespace 'com.denzygames.testdengine'
    compileSdk 33
    android.ndkVersion "23.1.7779620"

    signingConfigs {
        if (isSigningConfigAvailable) {
            release {
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
            }
        }
    }
    defaultConfig {
        applicationId "com.denzygames.testdengine"
        minSdk 24
        targetSdk 33
        versionCode 2
        versionName "1.0"

        externalNativeBuild
        {
            cmake
            {
                arguments "-DDENGINE_SCRIPTING_PYTHON=ON",
                          "-DBUILD_SHARED_LIBS=ON",
                          "-DDENGINE_LIGHTING_SHADOW3D=OFF"
            }
        }
    }

    splits.abi {
        enable true
        reset()

        include "x86", "x86_64", "armeabi-v7a", "arm64-v8a"
        universalApk true
    }

    buildTypes {
        release {
            if (isSigningConfigAvailable) {
                signingConfig signingConfigs.release
            } else {
                println("Warning: Release build will not be signed.")
            }
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    externalNativeBuild
    {
        cmake
        {
            version "3.30.3"
            path "src/main/code/CMakeLists.txt"
        }
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }



}

dependencies {

}
